import type { Role } from "../autogenerated";
import type { Snowflake } from "../models";

import { PermissionsBit, PermissionsBit_ALL } from "../autogenerated";

/** Permissions as serialized by the server */
export type RawPermissions = string | number;
/** Any type that can be converted into a Permission */
export type IntoPermissions = PermissionsBit | Permissions | bigint | string | boolean;

function into(perms: IntoPermissions): bigint {
    if(perms instanceof Permissions) {
        return perms.p;
    }

    switch(typeof perms) {
        case 'bigint':
            return perms;
        case 'string':
            return BigInt(perms);
        case 'boolean':
            return perms ? 1n : 0n;
        default:
            return 1n << BigInt(perms);
    }
}

export class Permissions {
    p: bigint;

    constructor(raw: RawPermissions | Permissions | bigint = '0') {
        this.p = raw instanceof Permissions ? raw.p : BigInt(raw);
    }

    /** Crates a new Permissions object with the same flags */
    clone(): Permissions {
        return new Permissions(this.p);
    }

    raw(): bigint {
        return this.p;
    }

    has(ip: IntoPermissions): boolean {
        let p = into(ip);
        return (this.p & p) == p;
    }

    is_admin(): boolean {
        return this.has(PermissionsBit.ADMINISTRATOR);
    }

    /** Mutates the current Permissions object to add the given permissions */
    add(...perms: IntoPermissions[]): Permissions {
        this.p = perms.reduce<bigint>((perms, perm) => perms | into(perm), this.p);
        return this;
    }

    /** Mutates the current Permissions object to remove the given permissions */
    sub(...perms: IntoPermissions[]): Permissions {
        this.p = perms.reduce<bigint>((perms, perm): bigint => perms & ~into(perm), this.p);
        return this;
    }

    /** Combines permission flags into a new Permissions object */
    union(...perms: IntoPermissions[]): Permissions {
        return this.clone().add(...perms);
    }

    /** Subtracts permissions flags into a new Permissions object */
    diff(...perms: IntoPermissions[]): Permissions {
        return this.clone().sub(...perms);
    }

    /** Computes the union of all the given permissions or bits */
    static union(...perms: IntoPermissions[]): Permissions {
        return Permissions.EMPTY.union(...perms);
    }

    static EMPTY: Permissions = new Permissions();
    static ALL: Permissions = new Permissions().add(...PermissionsBit_ALL);

    toJSON(): string {
        return this.p.toString();
    }

    static compute_base(roles: Role[]): Permissions {
        // optimized loop, aside from the bigint parsing
        let p = roles.reduce((perms, role) => (perms.p |= BigInt(role.permissions), perms), new Permissions());
        return p.is_admin() ? Permissions.ALL : p;
    }

    compute_overwrites(overwrites: Overwrite[], roles: Snowflake[], user_id: Snowflake): Permissions {
        if(this.is_admin()) {
            return Permissions.ALL;
        }

        let base = this.clone(), allow = new Permissions(), deny = allow.clone(), user_overwrite;

        // overwrites are always sorted role-first
        for(let overwrite of overwrites) {
            if(roles.indexOf(overwrite.id) != -1) {
                if(overwrite.deny) {
                    deny.add(overwrite.deny);
                }
                if(overwrite.allow) {
                    allow.add(overwrite.allow);
                }
            } else if(overwrite.id == user_id) {
                user_overwrite = overwrite;
                break;
            }
        }

        base.sub(deny).add(allow);

        if(user_overwrite) {
            if(user_overwrite.deny) {
                base.sub(user_overwrite.deny);
            }
            if(user_overwrite.allow) {
                base.add(user_overwrite.allow);
            }
        }

        return base;
    }
}

export interface RawOverwrite {
    id: Snowflake,
    allow?: RawPermissions,
    deny?: RawPermissions,
}

export interface Overwrite {
    id: Snowflake,
    allow?: Permissions,
    deny?: Permissions,
}
