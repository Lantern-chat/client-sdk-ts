import { ApiErrorCode, RawApiError } from "../autogenerated";
export { ApiErrorCode } from "../autogenerated";

export const enum ApiErrorKind {
    Unknown,
    ServerError,
    ClientError,
}

export class ApiError {
    code: ApiErrorCode;
    message: string;

    constructor(code: ApiErrorCode, message: string) {
        this.code = code;
        this.message = message;
    }

    /// Construct new ApiError from code and message, checking if code exists
    static from_obj({ code, message }: RawApiError): ApiError {
        return new ApiError(ApiErrorCode[code] ? code : ApiErrorCode.Unknown, message);
    }

    is_client(): boolean {
        return this.kind() == ApiErrorKind.ClientError;
    }

    is_server(): boolean {
        return this.kind() == ApiErrorKind.ServerError;
    }

    name(): string {
        return ApiErrorCode[this.code];
    }

    kind(): ApiErrorKind {
        let code = this.code;
        if(code >= 60000) {
            return ApiErrorKind.Unknown;
        } else if(code >= 50000) {
            return ApiErrorKind.ServerError;
        } else if(code >= 40000) {
            return ApiErrorKind.ClientError;
        } else {
            return ApiErrorKind.Unknown;
        }
    }
}